/* auto-generated by gen_syscalls.py, don't edit */

#ifndef Z_INCLUDE_SYSCALLS_GREETINGS_DRIVER_H
#define Z_INCLUDE_SYSCALLS_GREETINGS_DRIVER_H


#include <zephyr/tracing/tracing_syscall.h>

#ifndef _ASMLANGUAGE

#include <stdarg.h>

#include <syscall_list.h>
#include <zephyr/syscall.h>

#include <zephyr/linker/sections.h>


#ifdef __cplusplus
extern "C" {
#endif

extern void z_impl_greetings_driver_morning(const struct device * dev, const char * name);

__pinned_func
static inline void greetings_driver_morning(const struct device * dev, const char * name)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; const char * val; } parm1 = { .val = name };
		(void) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_GREETINGS_DRIVER_MORNING);
		return;
	}
#endif
	compiler_barrier();
	z_impl_greetings_driver_morning(dev, name);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define greetings_driver_morning(dev, name) do { 	sys_port_trace_syscall_enter(K_SYSCALL_GREETINGS_DRIVER_MORNING, greetings_driver_morning, dev, name); 	greetings_driver_morning(dev, name); 	sys_port_trace_syscall_exit(K_SYSCALL_GREETINGS_DRIVER_MORNING, greetings_driver_morning, dev, name); } while(false)
#endif
#endif


#ifdef __cplusplus
}
#endif

#endif
#endif /* include guard */
